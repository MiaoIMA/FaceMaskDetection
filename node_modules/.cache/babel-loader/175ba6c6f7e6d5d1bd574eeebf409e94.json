{"ast":null,"code":"import labels from \"./labels.json\";\n\n/**\n * Render prediction boxes\n * @param {HTMLCanvasElement} canvasRef canvas tag reference\n * @param {Array} boxes_data boxes array\n * @param {Array} scores_data scores array\n * @param {Array} classes_data class array\n * @param {Array[Number]} ratios boxes ratio [xRatio, yRatio]\n */\nexport const renderBoxes = (canvasRef, boxes_data, scores_data, classes_data, ratios) => {\n  const ctx = canvasRef.getContext(\"2d\");\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // clean canvas\n\n  const colors = new Colors();\n\n  // font configs\n  const font = `${Math.max(Math.round(Math.max(ctx.canvas.width, ctx.canvas.height) / 40), 14)}px Arial`;\n  ctx.font = font;\n  ctx.textBaseline = \"top\";\n  for (let i = 0; i < scores_data.length; ++i) {\n    // filter based on class threshold\n    const klass = labels[classes_data[i]];\n    const color = colors.get(classes_data[i]);\n    const score = (scores_data[i] * 100).toFixed(1);\n    let [y1, x1, y2, x2] = boxes_data.slice(i * 4, (i + 1) * 4);\n    x1 *= ratios[0];\n    x2 *= ratios[0];\n    y1 *= ratios[1];\n    y2 *= ratios[1];\n    const width = x2 - x1;\n    const height = y2 - y1;\n\n    // draw box.\n    ctx.fillStyle = Colors.hexToRgba(color, 0.2);\n    ctx.fillRect(x1, y1, width, height);\n\n    // draw border box.\n    ctx.strokeStyle = color;\n    ctx.lineWidth = Math.max(Math.min(ctx.canvas.width, ctx.canvas.height) / 200, 2.5);\n    ctx.strokeRect(x1, y1, width, height);\n\n    /*     // Draw the label background.\n        ctx.fillStyle = color;\n        const textWidth = ctx.measureText(klass + \" - \" + score + \"%\").width;\n        const textHeight = parseInt(font, 10); // base 10\n        const yText = y1 - (textHeight + ctx.lineWidth);\n        ctx.fillRect(\n          x1 - 1,\n          yText < 0 ? 0 : yText, // handle overflow label box\n          textWidth + ctx.lineWidth,\n          textHeight + ctx.lineWidth\n        );\n    \n        // Draw labels\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillText(klass + \" - \" + score + \"%\", x1 - 1, yText < 0 ? 0 : yText); */\n  }\n\n  // ... (原来的代码)\n\n  // 定义所有类别和对应的颜色\n  const allClasses = [{\n    name: \"with mask\",\n    color: \"#344593\"\n  }, {\n    name: \"mask weared incorrect\",\n    color: \"#48F90A\"\n  }, {\n    name: \"without mask\",\n    color: \"#FF701F\"\n  }];\n\n  // 计算每个类别的数量\n  let classCounts = {};\n  for (const klass of allClasses) {\n    classCounts[klass.name] = 0; // 初始化每个类别的数量为0\n  }\n\n  for (let i = 0; i < classes_data.length; ++i) {\n    const klass = labels[classes_data[i]];\n    if (classCounts.hasOwnProperty(klass)) {\n      classCounts[klass]++;\n    }\n  }\n\n  // 定义图例的位置和大小\n  const legendX = 10; // 图例的 x 坐标\n  const legendY = 10; // 图例的 y 坐标\n  const boxSize = 20; // 每个颜色框的大小\n  //const lineHeight = 28; // 每一行的高度\n\n  // 设置字体和颜色\n  ctx.font = 'bold 16px Arial';\n  ctx.textBaseline = 'middle';\n\n  // 定义图例的位置和大小\n  const paddingY = 10; // 文字与上下边框的距离\n  const lineHeight = 16 + 1.5 * paddingY; // 每一行的高度为字体大小加上上下边距\n\n  // 计算整个图例的宽度和高度\n  let maxWidth = 0;\n  const totalHeight = lineHeight * allClasses.length;\n  for (const klass of allClasses) {\n    const text = `${klass.name}  ${classCounts[klass.name]}`;\n    const textWidth = ctx.measureText(text).width;\n    maxWidth = Math.max(maxWidth, textWidth);\n  }\n  const totalWidth = maxWidth + boxSize + 15;\n\n  // 绘制整个图例的背景框\n  ctx.fillStyle = 'rgba(255,255,255,0.8)'; // 白色，半透明\n  ctx.fillRect(legendX, legendY, totalWidth, totalHeight);\n\n  // 绘制每个类别\n  let offsetY = 0;\n  for (const klass of allClasses) {\n    const color = klass.color; // 获取类别对应的颜色\n    // 绘制颜色框\n    ctx.fillStyle = color;\n    const boxY = legendY + offsetY + (lineHeight - boxSize) / 2; // 计算颜色框的垂直位置\n    ctx.fillRect(legendX, boxY, boxSize, boxSize);\n\n    // 绘制文字\n    ctx.fillStyle = '#000000'; // 使用深色以提高文字的清晰度\n    const textY = legendY + offsetY + lineHeight / 2; // 计算文字的垂直位置，使其与颜色框的中心对齐\n    ctx.fillText(`${klass.name} : ${classCounts[klass.name]}`, legendX + boxSize + 5, textY); // 文字垂直居中\n\n    // 更新偏移量，准备绘制下一行\n    offsetY += lineHeight;\n  }\n};\nclass Colors {\n  // ultralytics color palette https://ultralytics.com/\n  constructor() {\n    this.get = i => this.palette[Math.floor(i) % this.n];\n    this.palette = [\"#344593\", \"#48F90A\", \"#FF701F\", \"#FFB21D\", \"#CFD231\", \"#48F90A\", \"#92CC17\", \"#3DDB86\", \"#1A9334\", \"#00D4BB\", \"#2C99A8\", \"#00C2FF\", \"#344593\", \"#6473FF\", \"#0018EC\", \"#8438FF\", \"#520085\", \"#CB38FF\", \"#FF95C8\", \"#FF37C7\"];\n    this.n = this.palette.length;\n  }\n}\nColors.hexToRgba = (hex, alpha) => {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? `rgba(${[parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)].join(\", \")}, ${alpha})` : null;\n};","map":{"version":3,"names":["labels","renderBoxes","canvasRef","boxes_data","scores_data","classes_data","ratios","ctx","getContext","clearRect","canvas","width","height","colors","Colors","font","Math","max","round","textBaseline","i","length","klass","color","get","score","toFixed","y1","x1","y2","x2","slice","fillStyle","hexToRgba","fillRect","strokeStyle","lineWidth","min","strokeRect","allClasses","name","classCounts","hasOwnProperty","legendX","legendY","boxSize","paddingY","lineHeight","maxWidth","totalHeight","text","textWidth","measureText","totalWidth","offsetY","boxY","textY","fillText","constructor","palette","floor","n","hex","alpha","result","exec","parseInt","join"],"sources":["C:/Users/flori/Documents/PythonProjekt/FaceMaskDetection/yolov8n_facemask-tfjs/src/utils/renderBox.js"],"sourcesContent":["import labels from \"./labels.json\";\n\n/**\n * Render prediction boxes\n * @param {HTMLCanvasElement} canvasRef canvas tag reference\n * @param {Array} boxes_data boxes array\n * @param {Array} scores_data scores array\n * @param {Array} classes_data class array\n * @param {Array[Number]} ratios boxes ratio [xRatio, yRatio]\n */\nexport const renderBoxes = (canvasRef, boxes_data, scores_data, classes_data, ratios) => {\n  const ctx = canvasRef.getContext(\"2d\");\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // clean canvas\n\n  const colors = new Colors();\n\n  // font configs\n  const font = `${Math.max(\n    Math.round(Math.max(ctx.canvas.width, ctx.canvas.height) / 40),\n    14\n  )}px Arial`;\n  ctx.font = font;\n  ctx.textBaseline = \"top\";\n\n  for (let i = 0; i < scores_data.length; ++i) {\n    // filter based on class threshold\n    const klass = labels[classes_data[i]];\n    const color = colors.get(classes_data[i]);\n    const score = (scores_data[i] * 100).toFixed(1);\n\n    let [y1, x1, y2, x2] = boxes_data.slice(i * 4, (i + 1) * 4);\n    x1 *= ratios[0];\n    x2 *= ratios[0];\n    y1 *= ratios[1];\n    y2 *= ratios[1];\n    const width = x2 - x1;\n    const height = y2 - y1;\n\n    // draw box.\n    ctx.fillStyle = Colors.hexToRgba(color, 0.2);\n    ctx.fillRect(x1, y1, width, height);\n\n    // draw border box.\n    ctx.strokeStyle = color;\n    ctx.lineWidth = Math.max(Math.min(ctx.canvas.width, ctx.canvas.height) / 200, 2.5);\n    ctx.strokeRect(x1, y1, width, height);\n\n/*     // Draw the label background.\n    ctx.fillStyle = color;\n    const textWidth = ctx.measureText(klass + \" - \" + score + \"%\").width;\n    const textHeight = parseInt(font, 10); // base 10\n    const yText = y1 - (textHeight + ctx.lineWidth);\n    ctx.fillRect(\n      x1 - 1,\n      yText < 0 ? 0 : yText, // handle overflow label box\n      textWidth + ctx.lineWidth,\n      textHeight + ctx.lineWidth\n    );\n\n    // Draw labels\n    ctx.fillStyle = \"#ffffff\";\n    ctx.fillText(klass + \" - \" + score + \"%\", x1 - 1, yText < 0 ? 0 : yText); */\n  }\n\t\n\n// ... (原来的代码)\n\n\t// 定义所有类别和对应的颜色\n\tconst allClasses = [\n\t  { name: \"with mask\", color: \"#344593\" },\n\t  { name: \"mask weared incorrect\", color: \"#48F90A\" },\n\t  { name: \"without mask\", color: \"#FF701F\" }\n\t];\n\n\t// 计算每个类别的数量\n\tlet classCounts = {};\n\tfor (const klass of allClasses) {\n\t  classCounts[klass.name] = 0; // 初始化每个类别的数量为0\n\t}\n\tfor (let i = 0; i < classes_data.length; ++i) {\n\t  const klass = labels[classes_data[i]];\n\t  if (classCounts.hasOwnProperty(klass)) {\n\t\tclassCounts[klass]++;\n\t  }\n\t}\n\n\t// 定义图例的位置和大小\n\tconst legendX = 10; // 图例的 x 坐标\n\tconst legendY = 10; // 图例的 y 坐标\n\tconst boxSize = 20; // 每个颜色框的大小\n\t//const lineHeight = 28; // 每一行的高度\n\n\t// 设置字体和颜色\n\tctx.font = 'bold 16px Arial';\n\tctx.textBaseline = 'middle';\n\t\n\t\t// 定义图例的位置和大小\n\tconst paddingY = 10; // 文字与上下边框的距离\n\tconst lineHeight = 16 + 1.5 * paddingY; // 每一行的高度为字体大小加上上下边距\n\n\t// 计算整个图例的宽度和高度\n\tlet maxWidth = 0;\n\tconst totalHeight = lineHeight * allClasses.length;\n\tfor (const klass of allClasses) {\n\t  const text = `${klass.name}  ${classCounts[klass.name]}`;\n\t  const textWidth = ctx.measureText(text).width;\n\t  maxWidth = Math.max(maxWidth, textWidth);\n\t}\n\tconst totalWidth = maxWidth + boxSize + 15;\n\n\t// 绘制整个图例的背景框\n\tctx.fillStyle = 'rgba(255,255,255,0.8)'; // 白色，半透明\n\tctx.fillRect(legendX, legendY, totalWidth, totalHeight);\n\n\t// 绘制每个类别\n\tlet offsetY = 0;\n\tfor (const klass of allClasses) {\n\t  const color = klass.color; // 获取类别对应的颜色\n\t// 绘制颜色框\n\t  ctx.fillStyle = color;\n\t  const boxY = legendY + offsetY + (lineHeight - boxSize) / 2; // 计算颜色框的垂直位置\n\t  ctx.fillRect(legendX, boxY, boxSize, boxSize);\n\n\t  // 绘制文字\n\t  ctx.fillStyle = '#000000'; // 使用深色以提高文字的清晰度\n\t  const textY = legendY + offsetY + lineHeight / 2; // 计算文字的垂直位置，使其与颜色框的中心对齐\n\t  ctx.fillText(`${klass.name} : ${classCounts[klass.name]}`, legendX + boxSize + 5, textY); // 文字垂直居中\n\n\n\t  // 更新偏移量，准备绘制下一行\n\t  offsetY += lineHeight;\n\t}\n\n\n\n};\n\nclass Colors {\n  // ultralytics color palette https://ultralytics.com/\n  constructor() {\n    this.palette = [\n      \"#344593\",\n      \"#48F90A\",\n      \"#FF701F\",\n      \"#FFB21D\",\n      \"#CFD231\",\n      \"#48F90A\",\n      \"#92CC17\",\n      \"#3DDB86\",\n      \"#1A9334\",\n      \"#00D4BB\",\n      \"#2C99A8\",\n      \"#00C2FF\",\n      \"#344593\",\n      \"#6473FF\",\n      \"#0018EC\",\n      \"#8438FF\",\n      \"#520085\",\n      \"#CB38FF\",\n      \"#FF95C8\",\n      \"#FF37C7\",\n    ];\n    this.n = this.palette.length;\n  }\n\n  get = (i) => this.palette[Math.floor(i) % this.n];\n\n  static hexToRgba = (hex, alpha) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? `rgba(${[parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)].join(\n          \", \"\n        )}, ${alpha})`\n      : null;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}