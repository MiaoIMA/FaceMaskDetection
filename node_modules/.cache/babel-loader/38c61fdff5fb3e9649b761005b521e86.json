{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flori\\\\Documents\\\\PythonProjekt\\\\FaceMaskDetection\\\\yolov8n_facemask-tfjs\\\\src\\\\components\\\\btn-handler.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { Webcam } from \"../utils/webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonHandler = ({\n  imageRef,\n  cameraRef,\n  videoRef\n}) => {\n  _s();\n  const [streaming, setStreaming] = useState(null); // streaming state\n  const inputImageRef = useRef(null); // video input reference\n  const inputVideoRef = useRef(null); // video input reference\n  const webcam = new Webcam(); // webcam handler\n\n  // closing image\n  const closeImage = () => {\n    const url = imageRef.current.src;\n    imageRef.current.src = \"#\"; // restore image source\n    URL.revokeObjectURL(url); // revoke url\n\n    setStreaming(null); // set streaming to null\n    inputImageRef.current.value = \"\"; // reset input image\n    imageRef.current.style.display = \"none\"; // hide image\n  };\n\n  // closing video streaming\n  const closeVideo = () => {\n    const url = videoRef.current.src;\n    videoRef.current.src = \"\"; // restore video source\n    URL.revokeObjectURL(url); // revoke url\n\n    setStreaming(null); // set streaming to null\n    inputVideoRef.current.value = \"\"; // reset input video\n    videoRef.current.style.display = \"none\"; // hide video\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"btn-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      style: {\n        display: \"none\"\n      },\n      onChange: e => {\n        const url = URL.createObjectURL(e.target.files[0]); // create blob url\n        imageRef.current.src = url; // set video source\n        imageRef.current.style.display = \"block\"; // show video\n        setStreaming(\"image\"); // set streaming to video\n      },\n\n      ref: inputImageRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        // if not streaming\n        if (streaming === null) inputImageRef.current.click();\n        // closing image streaming\n        else if (streaming === \"image\") closeImage();else alert(`Can't handle more than 1 stream\\nCurrently streaming : ${streaming}`); // if streaming video or webcam\n      },\n      children: [streaming === \"image\" ? \"Close\" : \"Open\", \" Image\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"video/*\",\n      style: {\n        display: \"none\"\n      },\n      onChange: e => {\n        if (streaming === \"image\") closeImage(); // closing image streaming\n        const url = URL.createObjectURL(e.target.files[0]); // create blob url\n        videoRef.current.src = url; // set video source\n        videoRef.current.addEventListener(\"ended\", () => closeVideo()); // add ended video listener\n        videoRef.current.style.display = \"block\"; // show video\n        setStreaming(\"video\"); // set streaming to video\n      },\n\n      ref: inputVideoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        // if not streaming\n        if (streaming === null || streaming === \"image\") inputVideoRef.current.click();\n        // closing video streaming\n        else if (streaming === \"video\") closeVideo();else alert(`Can't handle more than 1 stream\\nCurrently streaming : ${streaming}`); // if streaming webcam\n      },\n      children: [streaming === \"video\" ? \"Close\" : \"Open\", \" Video\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        // if not streaming\n        if (streaming === null || streaming === \"image\") {\n          // closing image streaming\n          if (streaming === \"image\") closeImage();\n          webcam.open(cameraRef.current); // open webcam\n          cameraRef.current.style.display = \"block\"; // show camera\n          setStreaming(\"camera\"); // set streaming to camera\n        }\n        // closing video streaming\n        else if (streaming === \"camera\") {\n          webcam.close(cameraRef.current);\n          cameraRef.current.style.display = \"none\";\n          setStreaming(null);\n        } else alert(`Can't handle more than 1 stream\\nCurrently streaming : ${streaming}`); // if streaming video\n      },\n      children: [streaming === \"camera\" ? \"Close\" : \"Open\", \" Webcam\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ButtonHandler, \"WHx51jxOPaxSBh7jlQ916uxcLY4=\");\n_c = ButtonHandler;\nexport default ButtonHandler;\nvar _c;\n$RefreshReg$(_c, \"ButtonHandler\");","map":{"version":3,"names":["useState","useRef","Webcam","jsxDEV","_jsxDEV","ButtonHandler","imageRef","cameraRef","videoRef","_s","streaming","setStreaming","inputImageRef","inputVideoRef","webcam","closeImage","url","current","src","URL","revokeObjectURL","value","style","display","closeVideo","className","children","type","accept","onChange","e","createObjectURL","target","files","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","click","alert","addEventListener","open","close","_c","$RefreshReg$"],"sources":["C:/Users/flori/Documents/PythonProjekt/FaceMaskDetection/yolov8n_facemask-tfjs/src/components/btn-handler.jsx"],"sourcesContent":["import { useState, useRef } from \"react\";\nimport { Webcam } from \"../utils/webcam\";\n\nconst ButtonHandler = ({ imageRef, cameraRef, videoRef }) => {\n  const [streaming, setStreaming] = useState(null); // streaming state\n  const inputImageRef = useRef(null); // video input reference\n  const inputVideoRef = useRef(null); // video input reference\n  const webcam = new Webcam(); // webcam handler\n\n  // closing image\n  const closeImage = () => {\n    const url = imageRef.current.src;\n    imageRef.current.src = \"#\"; // restore image source\n    URL.revokeObjectURL(url); // revoke url\n\n    setStreaming(null); // set streaming to null\n    inputImageRef.current.value = \"\"; // reset input image\n    imageRef.current.style.display = \"none\"; // hide image\n  };\n\n  // closing video streaming\n  const closeVideo = () => {\n    const url = videoRef.current.src;\n    videoRef.current.src = \"\"; // restore video source\n    URL.revokeObjectURL(url); // revoke url\n\n    setStreaming(null); // set streaming to null\n    inputVideoRef.current.value = \"\"; // reset input video\n    videoRef.current.style.display = \"none\"; // hide video\n  };\n\n  return (\n    <div className=\"btn-container\">\n      {/* Image Handler */}\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        style={{ display: \"none\" }}\n        onChange={(e) => {\n          const url = URL.createObjectURL(e.target.files[0]); // create blob url\n          imageRef.current.src = url; // set video source\n          imageRef.current.style.display = \"block\"; // show video\n          setStreaming(\"image\"); // set streaming to video\n        }}\n        ref={inputImageRef}\n      />\n      <button\n        onClick={() => {\n          // if not streaming\n          if (streaming === null) inputImageRef.current.click();\n          // closing image streaming\n          else if (streaming === \"image\") closeImage();\n          else alert(`Can't handle more than 1 stream\\nCurrently streaming : ${streaming}`); // if streaming video or webcam\n        }}\n      >\n        {streaming === \"image\" ? \"Close\" : \"Open\"} Image\n      </button>\n\n      {/* Video Handler */}\n      <input\n        type=\"file\"\n        accept=\"video/*\"\n        style={{ display: \"none\" }}\n        onChange={(e) => {\n          if (streaming === \"image\") closeImage(); // closing image streaming\n          const url = URL.createObjectURL(e.target.files[0]); // create blob url\n          videoRef.current.src = url; // set video source\n          videoRef.current.addEventListener(\"ended\", () => closeVideo()); // add ended video listener\n          videoRef.current.style.display = \"block\"; // show video\n          setStreaming(\"video\"); // set streaming to video\n        }}\n        ref={inputVideoRef}\n      />\n      <button\n        onClick={() => {\n          // if not streaming\n          if (streaming === null || streaming === \"image\") inputVideoRef.current.click();\n          // closing video streaming\n          else if (streaming === \"video\") closeVideo();\n          else alert(`Can't handle more than 1 stream\\nCurrently streaming : ${streaming}`); // if streaming webcam\n        }}\n      >\n        {streaming === \"video\" ? \"Close\" : \"Open\"} Video\n      </button>\n\n      {/* Webcam Handler */}\n      <button\n        onClick={() => {\n          // if not streaming\n          if (streaming === null || streaming === \"image\") {\n            // closing image streaming\n            if (streaming === \"image\") closeImage();\n            webcam.open(cameraRef.current); // open webcam\n            cameraRef.current.style.display = \"block\"; // show camera\n            setStreaming(\"camera\"); // set streaming to camera\n          }\n          // closing video streaming\n          else if (streaming === \"camera\") {\n            webcam.close(cameraRef.current);\n            cameraRef.current.style.display = \"none\";\n            setStreaming(null);\n          } else alert(`Can't handle more than 1 stream\\nCurrently streaming : ${streaming}`); // if streaming video\n        }}\n      >\n        {streaming === \"camera\" ? \"Close\" : \"Open\"} Webcam\n      </button>\n    </div>\n  );\n};\n\nexport default ButtonHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}