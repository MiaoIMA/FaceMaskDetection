{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BitwiseAnd, env } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { bitwiseAndImplCPU as cpuBitwiseAnd } from '../kernel_utils/shared';\nexport const BITWISEAND = `\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n`;\nexport const BITWISEAND_UNPACKED = `\n  return float(int(a.r) & int(b.r));\n`;\nexport function bitwiseAnd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n  const versionNumber = env().getNumber('WEBGL_VERSION');\n  // The type of a and b are ensured to be `int32` in core, therefore no need to\n  // consider other type situations.\n  if (backend.shouldExecuteOnCPU([a, b]) || versionNumber === 1) {\n    const aVals = backend.texData.get(a.dataId).values;\n    const bVals = backend.texData.get(b.dataId).values;\n    const [outValues, outShape] = cpuBitwiseAnd(a.shape, b.shape, aVals, bVals, a.dtype);\n    const out = backend.makeTensorInfo(outShape, a.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n  let program;\n  if (shouldUsePackedProgram) {\n    program = new BinaryOpPackedProgram(BITWISEAND, a.shape, b.shape, false);\n  } else {\n    program = new BinaryOpProgram(BITWISEAND_UNPACKED, a.shape, b.shape);\n  }\n  return backend.runWebGLProgram(program, [a, b], a.dtype);\n}\nexport const bitwiseAndConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'webgl',\n  kernelFunc: bitwiseAnd\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/BitwiseAnd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,UAAU,EAAoB,GAAG,QAAyD,uBAAuB;AAEzH,SAAQ,eAAe,QAAO,iBAAiB;AAC/C,SAAQ,qBAAqB,QAAO,wBAAwB;AAC5D,SAAQ,iBAAiB,IAAI,aAAa,QAAO,wBAAwB;AAEzE,OAAO,MAAM,UAAU,GAAG;;;;;;CAMzB;AAED,OAAO,MAAM,mBAAmB,GAAG;;CAElC;AAED,OAAM,SAAU,UAAU,CAAC,IAG1B,EAAA;EACC,MAAM;IAAC,MAAM;IAAE;EAAO,CAAC,GAAG,IAAI;EAC9B,MAAM;IAAC,CAAC;IAAE;EAAC,CAAC,GAAG,MAAM;EACrB,MAAM,sBAAsB,GAAG,GAAG,CAAA,CAAE,CAAC,OAAO,CAAC,8BAA8B,CAAC;EAC5E,MAAM,aAAa,GAAG,GAAG,CAAA,CAAE,CAAC,SAAS,CAAC,eAAe,CAAC;EAEtD;EACA;EACA,IAAK,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAK,aAAa,KAAK,CAAC,EAAE;IAC/D,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAoB;IAChE,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAoB;IAChE,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,GACvB,aAAa,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;IAE1D,MAAM,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC;IACrD,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC;IAC/C,OAAO,CAAC,MAAM,GAAG,SAAS;IAC1B,OAAO,GAAG;EACX;EAED,IAAI,OAA8C;EAClD,IAAI,sBAAsB,EAAE;IAC1B,OAAO,GAAG,IAAI,qBAAqB,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC;GACzE,MAAM;IACL,OAAO,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;EACrE;EAED,OAAO,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;AAC1D;AAEA,OAAO,MAAM,gBAAgB,GAAiB;EAC5C,UAAU,EAAE,UAAU;EACtB,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, BitwiseAndInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {bitwiseAndImplCPU as cpuBitwiseAnd} from '../kernel_utils/shared';\n\nexport const BITWISEAND = `\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n`;\n\nexport const BITWISEAND_UNPACKED = `\n  return float(int(a.r) & int(b.r));\n`;\n\nexport function bitwiseAnd(args: {\n  inputs: BitwiseAndInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n  const versionNumber = env().getNumber('WEBGL_VERSION');\n\n  // The type of a and b are ensured to be `int32` in core, therefore no need to\n  // consider other type situations.\n  if ((backend.shouldExecuteOnCPU([a, b])) || versionNumber === 1) {\n    const aVals = backend.texData.get(a.dataId).values as TypedArray;\n    const bVals = backend.texData.get(b.dataId).values as TypedArray;\n    const [outValues, outShape] =\n        cpuBitwiseAnd(a.shape, b.shape, aVals, bVals, a.dtype);\n\n    const out = backend.makeTensorInfo(outShape, a.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (shouldUsePackedProgram) {\n    program = new BinaryOpPackedProgram(BITWISEAND, a.shape, b.shape, false);\n  } else {\n    program = new BinaryOpProgram(BITWISEAND_UNPACKED, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], a.dtype);\n}\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'webgl',\n  kernelFunc: bitwiseAnd as unknown as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}