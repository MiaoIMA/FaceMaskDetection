{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Draw } from '@tensorflow/tfjs-core';\nexport function draw(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image\n  } = inputs;\n  const {\n    canvas,\n    options\n  } = attrs;\n  const {\n    contextOptions,\n    imageOptions\n  } = options || {};\n  const alpha = (imageOptions === null || imageOptions === void 0 ? void 0 : imageOptions.alpha) || 1;\n  const contextType = (contextOptions === null || contextOptions === void 0 ? void 0 : contextOptions.contextType) || '2d';\n  if (contextType !== '2d') {\n    throw new Error(`Context type ${contextOptions.contextType} is not supported by the CPU backend.`);\n  }\n  const ctx = canvas.getContext(contextType, (contextOptions === null || contextOptions === void 0 ? void 0 : contextOptions.contextAttributes) || {});\n  if (ctx == null) {\n    throw new Error(`Could not get the context with ${contextType} type.`);\n  }\n  const [height, width] = image.shape.slice(0, 2);\n  const depth = image.shape.length === 2 ? 1 : image.shape[2];\n  const data = backend.data.get(image.dataId).values;\n  const multiplier = image.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255 * alpha];\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n      if (image.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if (image.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n  canvas.width = width;\n  canvas.height = height;\n  const imageData = new ImageData(bytes, width, height);\n  ctx.putImageData(imageData, 0, 0);\n  return image;\n}\nexport const drawConfig = {\n  kernelName: Draw,\n  backendName: 'cpu',\n  kernelFunc: draw\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Draw.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Draw, DrawAttrs, DrawInputs, KernelConfig, KernelFunc, TypedArray} from '@tensorflow/tfjs-core';\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function draw(\n    args: {inputs: DrawInputs, backend: MathBackendCPU, attrs: DrawAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {canvas, options} = attrs;\n  const {contextOptions, imageOptions} = options || {};\n  const alpha = imageOptions ?.alpha || 1;\n\n  const contextType = contextOptions ?.contextType || '2d';\n  if (contextType !== '2d') {\n    throw new Error(`Context type ${\n        contextOptions.contextType} is not supported by the CPU backend.`);\n  }\n  const ctx = canvas.getContext(contextType,\n    contextOptions?.contextAttributes || {}) as CanvasRenderingContext2D ;\n  if (ctx == null) {\n    throw new Error(`Could not get the context with ${contextType} type.`);\n  }\n\n  const [height, width] = image.shape.slice(0, 2);\n  const depth = image.shape.length === 2 ? 1 : image.shape[2];\n  const data = backend.data.get(image.dataId).values as TypedArray;\n  const multiplier = image.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255 * alpha];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if (image.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if (image.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  canvas.width = width;\n  canvas.height = height;\n  const imageData = new ImageData(bytes, width, height);\n  ctx.putImageData(imageData, 0, 0);\n  return image;\n}\n\nexport const drawConfig: KernelConfig = {\n  kernelName: Draw,\n  backendName: 'cpu',\n  kernelFunc: draw as unknown as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}