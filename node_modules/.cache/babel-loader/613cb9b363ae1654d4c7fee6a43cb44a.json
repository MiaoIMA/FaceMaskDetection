{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, StaticRegexReplace } from '@tensorflow/tfjs-core';\nimport { staticRegexReplaceImplCPU } from '../kernel_utils/shared';\nexport function staticRegexReplace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (x.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  const $x = backend.readSync(x.dataId);\n  const stringInput = backend_util.fromUint8ToStringArray($x);\n  const output = staticRegexReplaceImplCPU(stringInput, 'string', attrs);\n  return backend.makeTensorInfo(x.shape, 'string', output);\n}\nexport const staticRegexReplaceConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'webgl',\n  kernelFunc: staticRegexReplace\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/StaticRegexReplace.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAA0C,kBAAkB,QAAsE,uBAAuB;AAE7K,SAAQ,yBAAyB,QAAO,wBAAwB;AAEhE,OAAM,SAAU,kBAAkB,CAAC,IAIlC,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAElB,IAAI,CAAC,CAAC,KAAK,KAAK,QAAQ,EAAE;IACxB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC;EACpD;EAED,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAiB;EAErD,MAAM,WAAW,GAAG,YAAY,CAAC,sBAAsB,CAAC,EAAE,CAAC;EAC3D,MAAM,MAAM,GAAG,yBAAyB,CAAC,WAAW,EAAE,QAAQ,EACrB,KAAgC,CAAC;EAE1E,OAAO,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC;AAC1D;AAEA,OAAO,MAAM,wBAAwB,GAAiB;EACpD,UAAU,EAAE,kBAAkB;EAC9B,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, NamedAttrMap, StaticRegexReplace, StaticRegexReplaceAttrs, StaticRegexReplaceInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {staticRegexReplaceImplCPU} from '../kernel_utils/shared';\n\nexport function staticRegexReplace(args: {\n  inputs: StaticRegexReplaceInputs,\n  backend: MathBackendWebGL,\n  attrs: StaticRegexReplaceAttrs,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n\n  if (x.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  const $x = backend.readSync(x.dataId) as Uint8Array[];\n\n  const stringInput = backend_util.fromUint8ToStringArray($x);\n  const output = staticRegexReplaceImplCPU(stringInput, 'string',\n                                           attrs as unknown as NamedAttrMap);\n\n  return backend.makeTensorInfo(x.shape, 'string', output);\n}\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'webgl',\n  kernelFunc: staticRegexReplace as unknown as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}